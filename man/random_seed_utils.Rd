% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rng_utils.R
\name{get_random_seed}
\alias{get_random_seed}
\alias{set_random_seed}
\alias{next_random_seed}
\alias{is_valid_random_seed}
\alias{is_lecyer_cmrg_seed}
\alias{as_lecyer_cmrg_seed}
\title{Tools for Working with Parallel Random Seeds}
\usage{
get_random_seed()

set_random_seed(seed)

next_random_seed(seed = get_random_seed())

is_valid_random_seed(seed)

is_lecyer_cmrg_seed(seed)

as_lecyer_cmrg_seed(seed)
}
\arguments{
\item{seed}{A random seed}
}
\value{
\code{get_random_seed()} returns the \emph{current} \code{.Random.seed}.  If it does not
exists, it returns \code{NULL}.

\code{set_random_seed(seed)} sets a new value on \code{.Random.seed}, and invisibly
returns the \emph{old} seed.  If \code{seed = NULL}, then the \code{.Random.seed} is
removed.

\code{next_random_seed()} updates \code{.Random.seed} by drawning an dummy random
number internally, and invisibly returns the \emph{new} seed.

\code{is_valid_random_seed(seed)} returns TRUE if \code{seed} is a valid random seed
of any RNG kind, otherwise FALSE.
This function does \emph{not} update \code{.Random.seed}.

\code{is_lecyer_cmrg_seed(seed)} returns TRUE if \code{seed} is a valid random seed
of kind \verb{L'Ecuyer-CMRG}, otherwise FALSE.
This function does \emph{not} update \code{.Random.seed}.

\code{as_lecyer_cmrg_seed(seed)} returns \verb{L'Ecuyer-CMRG} random seed based on
random seed \code{seed}.  If \code{seed} is already of the right RNG kind, then that
seed is returned as-is.  If a scalar, then a \verb{L'Ecuyer-CMRG} random seed
is generated from that seed with the help of \code{set.seed()}.
This function does \emph{not} update \code{.Random.seed}.
}
\description{
Tools for Working with Parallel Random Seeds
}
\examples{
## This example gives identical results in the two
## approaches only if .Random.seed already exists
seed_org <- next_random_seed()
set.seed(42)

## Draw two random number from 1:100 one after the other
seed_before <- get_random_seed()
x <- sample.int(100L, size = 1L)
y <- sample.int(100L, size = 1L)
seed_after <- get_random_seed()
print(c(x, y))

## Draw two random number from 1:100 at once
set_random_seed(seed_before)
z <- sample.int(100L, size = 2L)
seed_after2 <- get_random_seed()
print(z)

## The same random numbers where drawn ...
stopifnot(identical(z, c(x, y)))

## ... and the RNG state is the same after the second
## run as after the first, two-step, approach
stopifnot(identical(seed_after2, seed_after))

set_random_seed(seed_org)
stopifnot(identical(get_random_seed(), seed_org))
}
\seealso{
For more information on random number generation (RNG) in R,
see \link[base:Random]{base::Random}.
}
