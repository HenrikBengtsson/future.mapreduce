% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_rng_seeds.R
\name{make_rng_seeds}
\alias{make_rng_seeds}
\title{Produce Reproducible Seeds for Parallel Random Number Generation}
\usage{
make_rng_seeds(count, seed = FALSE)
}
\arguments{
\item{count}{The number of RNG seeds to produce.}

\item{seed}{A logical specifying whether RNG seeds should be generated
or not.  (\code{seed = NULL} corresponds to \code{seed = FALSE}).
If a list, then it should be of length \code{count} and each element should
consist of a valid RNG seed.}
}
\value{
Returns a non-named list of \code{count} independent \verb{L'Ecuyer-CMRG}
random seeds.
If \code{seed} is \code{NULL} or \code{FALSE}, then \code{NULL} is returned.
}
\description{
Produce Reproducible Seeds for Parallel Random Number Generation
}
\details{
This function generates \code{count} independent \verb{L'Ecuyer-CMRG} random seeds
that can be used as \code{.Random.seed} for parallel processing.  These seeds
are produced with help of \code{\link[parallel:RngStream]{parallel::nextRNGSubStream()}} and
\code{\link[parallel:RngStream]{parallel::nextRNGStream()}} using a strategy that

\if{html}{\out{<div class="sourceCode r">}}\preformatted{seed <- <initial RNG seed>
for (ii in seq_len(count)) \{
  seeds[[ii]] <- parallel::nextRNGSubStream(seed)
  seed <- parallel::nextRNGStream(seed)
\}
}\if{html}{\out{</div>}}

This function forwards the RNG state \code{1 + count} times if \code{seed = TRUE}.
}
\examples{
## Set up L'Ecuyer-CMRG random seeds for 100 parallel tasks
## based on .Random.seed in the current R process
seeds <- make_rng_seeds(100L, seed = TRUE)
str(seeds)
}
