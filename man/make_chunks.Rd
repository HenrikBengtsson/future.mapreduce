% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_chunks.R
\name{make_chunks}
\alias{make_chunks}
\title{Create Chunks of Index Vectors}
\usage{
make_chunks(nelements, nworkers, scheduling = 1, chunk_size = NULL)
}
\arguments{
\item{nelements}{(integer) Total number of elements to iterate over.}

\item{nworkers}{(integer) Number of workers available.}

\item{scheduling}{(numeric) A strictly positive scalar.
Only used if argument \code{chunk_size} is \code{NULL}.}

\item{chunk_size}{(numeric) The maximum number of elements per
chunk, or \code{NULL}.  If \code{NULL}, then the chunk sizes are given by the
\code{scheduling} argument.}
}
\value{
A list of chunks, where each chunk is an integer vector of
unique indices \code{[1, nelements]}.  The union of all chunks
holds \code{nelements} elements and equals \code{1:nelements}.
If \code{nelements == 0}, then an empty list is returned.
}
\description{
\emph{This is an internal function.}
}
\section{Control processing order of elements}{

Attribute \code{ordering} of \code{chunk_size} or \code{scheduling} can
be used to control the ordering the elements are iterated over, which
only affects the processing order \emph{not} the order values are returned.
This attribute can take the following values:
\itemize{
\item index vector - an numeric vector of length \code{nelements} specifying
how elements are remapped
\item function     - an function taking one argument which is called as
\code{ordering(nelements)} and which must return an
index vector of length \code{nelements}, e.g.
\code{function(n) rev(seq_len(n))} for reverse ordering.
\item \code{"random"}   - this will randomize the ordering via random index
vector \code{sample.int(nelements)}.
}
}

